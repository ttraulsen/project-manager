# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Project(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, parent: int=None, name: str=None, customer: int=None, startdate: datetime=None, enddate: datetime=None, type: str='Kundenprojekt', kind: str='Beratung'):
        """
        Project - a model defined in Swagger

        :param id: The id of this Project.
        :type id: int
        :param parent: The parent of this Project.
        :type parent: int
        :param name: The name of this Project.
        :type name: str
        :param customer: The customer of this Project.
        :type customer: int
        :param startdate: The startdate of this Project.
        :type startdate: datetime
        :param enddate: The enddate of this Project.
        :type enddate: datetime
        :param type: The type of this Project.
        :type type: str
        :param kind: The kind of this Project.
        :type kind: str
        """
        self.swagger_types = {
            'id': int,
            'parent': int,
            'name': str,
            'customer': int,
            'startdate': datetime,
            'enddate': datetime,
            'type': str,
            'kind': str
        }

        self.attribute_map = {
            'id': 'id',
            'parent': 'parent',
            'name': 'name',
            'customer': 'customer',
            'startdate': 'startdate',
            'enddate': 'enddate',
            'type': 'type',
            'kind': 'kind'
        }

        self._id = id
        self._parent = parent
        self._name = name
        self._customer = customer
        self._startdate = startdate
        self._enddate = enddate
        self._type = type
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt) -> 'Project':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.
        :rtype: Project
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this Project.
        internal id of project, gets created by system

        :return: The id of this Project.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this Project.
        internal id of project, gets created by system

        :param id: The id of this Project.
        :type id: int
        """

        self._id = id

    @property
    def parent(self) -> int:
        """
        Gets the parent of this Project.
        id of parent project so projects can be organized

        :return: The parent of this Project.
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent: int):
        """
        Sets the parent of this Project.
        id of parent project so projects can be organized

        :param parent: The parent of this Project.
        :type parent: int
        """

        self._parent = parent

    @property
    def name(self) -> str:
        """
        Gets the name of this Project.

        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Project.

        :param name: The name of this Project.
        :type name: str
        """

        self._name = name

    @property
    def customer(self) -> int:
        """
        Gets the customer of this Project.
        id of customer this project is done for

        :return: The customer of this Project.
        :rtype: int
        """
        return self._customer

    @customer.setter
    def customer(self, customer: int):
        """
        Sets the customer of this Project.
        id of customer this project is done for

        :param customer: The customer of this Project.
        :type customer: int
        """

        self._customer = customer

    @property
    def startdate(self) -> datetime:
        """
        Gets the startdate of this Project.
        start date of project

        :return: The startdate of this Project.
        :rtype: datetime
        """
        return self._startdate

    @startdate.setter
    def startdate(self, startdate: datetime):
        """
        Sets the startdate of this Project.
        start date of project

        :param startdate: The startdate of this Project.
        :type startdate: datetime
        """

        self._startdate = startdate

    @property
    def enddate(self) -> datetime:
        """
        Gets the enddate of this Project.
        end date of project

        :return: The enddate of this Project.
        :rtype: datetime
        """
        return self._enddate

    @enddate.setter
    def enddate(self, enddate: datetime):
        """
        Sets the enddate of this Project.
        end date of project

        :param enddate: The enddate of this Project.
        :type enddate: datetime
        """

        self._enddate = enddate

    @property
    def type(self) -> str:
        """
        Gets the type of this Project.
        type of this project

        :return: The type of this Project.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """
        Sets the type of this Project.
        type of this project

        :param type: The type of this Project.
        :type type: str
        """
        allowed_values = ["Kundenprojekt", "internes Projekt", "untergeordnet", "offen"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def kind(self) -> str:
        """
        Gets the kind of this Project.
        kind of project

        :return: The kind of this Project.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """
        Sets the kind of this Project.
        kind of project

        :param kind: The kind of this Project.
        :type kind: str
        """
        allowed_values = ["Beratung", "SBF", "RA / RRD", "SBF / RA / RRD", "Sonstiges"]
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

