# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Status(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, owner: str=None, code: int=None, status: str=None):
        """
        Status - a model defined in Swagger

        :param id: The id of this Status.
        :type id: int
        :param owner: The owner of this Status.
        :type owner: str
        :param code: The code of this Status.
        :type code: int
        :param status: The status of this Status.
        :type status: str
        """
        self.swagger_types = {
            'id': int,
            'owner': str,
            'code': int,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'owner': 'owner',
            'code': 'code',
            'status': 'status'
        }

        self._id = id
        self._owner = owner
        self._code = code
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Status':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Status of this Status.
        :rtype: Status
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this Status.
        internal id of status, gets created by system

        :return: The id of this Status.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this Status.
        internal id of status, gets created by system

        :param id: The id of this Status.
        :type id: int
        """

        self._id = id

    @property
    def owner(self) -> str:
        """
        Gets the owner of this Status.
        owner of status to differentiate between status by customer and internal status

        :return: The owner of this Status.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner: str):
        """
        Sets the owner of this Status.
        owner of status to differentiate between status by customer and internal status

        :param owner: The owner of this Status.
        :type owner: str
        """

        self._owner = owner

    @property
    def code(self) -> int:
        """
        Gets the code of this Status.
        status code, normally a number between 01 and 99, should be formatted as 00

        :return: The code of this Status.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code: int):
        """
        Sets the code of this Status.
        status code, normally a number between 01 and 99, should be formatted as 00

        :param code: The code of this Status.
        :type code: int
        """

        self._code = code

    @property
    def status(self) -> str:
        """
        Gets the status of this Status.
        name of status, for example \"planned\", \"staffed\", \"finished\"

        :return: The status of this Status.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """
        Sets the status of this Status.
        name of status, for example \"planned\", \"staffed\", \"finished\"

        :param status: The status of this Status.
        :type status: str
        """

        self._status = status

