# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Comment(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, project: int=None, comment: str=None, timestamp: datetime=None, user: int=None):
        """
        Comment - a model defined in Swagger

        :param id: The id of this Comment.
        :type id: int
        :param project: The project of this Comment.
        :type project: int
        :param comment: The comment of this Comment.
        :type comment: str
        :param timestamp: The timestamp of this Comment.
        :type timestamp: datetime
        :param user: The user of this Comment.
        :type user: int
        """
        self.swagger_types = {
            'id': int,
            'project': int,
            'comment': str,
            'timestamp': datetime,
            'user': int
        }

        self.attribute_map = {
            'id': 'id',
            'project': 'project',
            'comment': 'comment',
            'timestamp': 'timestamp',
            'user': 'user'
        }

        self._id = id
        self._project = project
        self._comment = comment
        self._timestamp = timestamp
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'Comment':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Comment of this Comment.
        :rtype: Comment
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this Comment.
        internal id of comment, gets created by system

        :return: The id of this Comment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this Comment.
        internal id of comment, gets created by system

        :param id: The id of this Comment.
        :type id: int
        """

        self._id = id

    @property
    def project(self) -> int:
        """
        Gets the project of this Comment.
        id of project this comment is about

        :return: The project of this Comment.
        :rtype: int
        """
        return self._project

    @project.setter
    def project(self, project: int):
        """
        Sets the project of this Comment.
        id of project this comment is about

        :param project: The project of this Comment.
        :type project: int
        """

        self._project = project

    @property
    def comment(self) -> str:
        """
        Gets the comment of this Comment.
        actual comment

        :return: The comment of this Comment.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """
        Sets the comment of this Comment.
        actual comment

        :param comment: The comment of this Comment.
        :type comment: str
        """

        self._comment = comment

    @property
    def timestamp(self) -> datetime:
        """
        Gets the timestamp of this Comment.
        timestamp of this comment

        :return: The timestamp of this Comment.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """
        Sets the timestamp of this Comment.
        timestamp of this comment

        :param timestamp: The timestamp of this Comment.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def user(self) -> int:
        """
        Gets the user of this Comment.
        id of the user this comment came from

        :return: The user of this Comment.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user: int):
        """
        Sets the user of this Comment.
        id of the user this comment came from

        :param user: The user of this Comment.
        :type user: int
        """

        self._user = user

